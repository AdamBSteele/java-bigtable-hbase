// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1approved/bigtable_service.proto

package com.google.bigtable.v1;

public final class BigtableServicesProto {
  private BigtableServicesProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n1google/bigtable/v1approved/bigtable_se" +
      "rvice.proto\022\022google.bigtable.v1\032\034google/" +
      "api/annotations.proto\032.google/bigtable/v" +
      "1approved/bigtable_data.proto\032:google/bi" +
      "gtable/v1approved/bigtable_service_messa" +
      "ges.proto\032\033google/protobuf/empty.proto2\260" +
      "\007\n\017BigtableService\022\245\001\n\010ReadRows\022#.google" +
      ".bigtable.v1.ReadRowsRequest\032$.google.bi" +
      "gtable.v1.ReadRowsResponse\"L\202\323\344\223\002F\"A/v1/" +
      "{table_name=projects/*/zones/*/clusters/",
      "*/tables/*}/rows:read:\001*0\001\022\267\001\n\rSampleRow" +
      "Keys\022(.google.bigtable.v1.SampleRowKeysR" +
      "equest\032).google.bigtable.v1.SampleRowKey" +
      "sResponse\"O\202\323\344\223\002I\022G/v1/{table_name=proje" +
      "cts/*/zones/*/clusters/*/tables/*}/rows:" +
      "sampleKeys0\001\022\243\001\n\tMutateRow\022$.google.bigt" +
      "able.v1.MutateRowRequest\032\026.google.protob" +
      "uf.Empty\"X\202\323\344\223\002R\"M/v1/{table_name=projec" +
      "ts/*/zones/*/clusters/*/tables/*}/rows/{" +
      "row_key}:mutate:\001*\022\322\001\n\021CheckAndMutateRow",
      "\022,.google.bigtable.v1.CheckAndMutateRowR" +
      "equest\032-.google.bigtable.v1.CheckAndMuta" +
      "teRowResponse\"`\202\323\344\223\002Z\"U/v1/{table_name=p" +
      "rojects/*/zones/*/clusters/*/tables/*}/r" +
      "ows/{row_key}:checkAndMutate:\001*\022\277\001\n\022Read" +
      "ModifyWriteRow\022-.google.bigtable.v1.Read" +
      "ModifyWriteRowRequest\032\027.google.bigtable." +
      "v1.Row\"a\202\323\344\223\002[\"V/v1/{table_name=projects" +
      "/*/zones/*/clusters/*/tables/*}/rows/{ro" +
      "w_key}:readModifyWrite:\001*B4\n\026com.google.",
      "bigtable.v1B\025BigtableServicesProtoP\001\210\001\001b" +
      "\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.api.AnnotationsProto.getDescriptor(),
          com.google.bigtable.v1.BigtableDataProto.getDescriptor(),
          com.google.bigtable.v1.BigtableServiceMessagesProto.getDescriptor(),
          com.google.protobuf.EmptyProto.getDescriptor(),
        }, assigner);
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(com.google.api.AnnotationsProto.http);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.google.api.AnnotationsProto.getDescriptor();
    com.google.bigtable.v1.BigtableDataProto.getDescriptor();
    com.google.bigtable.v1.BigtableServiceMessagesProto.getDescriptor();
    com.google.protobuf.EmptyProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
