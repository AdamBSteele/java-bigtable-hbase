// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/table/v1approved/bigtable_table_service.proto

package com.google.bigtable.admin.table.v1;

/**
 * Protobuf service {@code google.bigtable.admin.table.v1.BigtableTableService}
 *
 * <pre>
 * Service for creating, configuring, and deleting Cloud Bigtable tables.
 * Provides access to the table schemas only, not the data stored within the tables.
 * </pre>
 */
public  abstract class BigtableTableService
    implements com.google.protobuf.Service {
  protected BigtableTableService() {}

  public interface Interface {
    /**
     * <code>rpc CreateTable(.google.bigtable.admin.table.v1.CreateTableRequest) returns (.google.bigtable.admin.table.v1.Table);</code>
     *
     * <pre>
     * Creates a new table, to be served from a specified cluster.
     * The table can be created with a full set of initial column families,
     * specified in the request.
     * </pre>
     */
    public abstract void createTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.CreateTableRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.Table> done);

    /**
     * <code>rpc ListTables(.google.bigtable.admin.table.v1.ListTablesRequest) returns (.google.bigtable.admin.table.v1.ListTablesResponse);</code>
     *
     * <pre>
     * Lists the names of all tables served from a specified cluster.
     * </pre>
     */
    public abstract void listTables(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.ListTablesRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ListTablesResponse> done);

    /**
     * <code>rpc GetTable(.google.bigtable.admin.table.v1.GetTableRequest) returns (.google.bigtable.admin.table.v1.Table);</code>
     *
     * <pre>
     * Gets the schema of the specified table, including its column families.
     * </pre>
     */
    public abstract void getTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.GetTableRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.Table> done);

    /**
     * <code>rpc DeleteTable(.google.bigtable.admin.table.v1.DeleteTableRequest) returns (.google.protobuf.Empty);</code>
     *
     * <pre>
     * Permanently deletes a specified table and all of its data.
     * </pre>
     */
    public abstract void deleteTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.DeleteTableRequest request,
        com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done);

    /**
     * <code>rpc RenameTable(.google.bigtable.admin.table.v1.RenameTableRequest) returns (.google.protobuf.Empty);</code>
     *
     * <pre>
     * Changes the name of a specified table.
     * Cannot be used to move tables between clusters, zones, or projects.
     * </pre>
     */
    public abstract void renameTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.RenameTableRequest request,
        com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done);

    /**
     * <code>rpc CreateColumnFamily(.google.bigtable.admin.table.v1.CreateColumnFamilyRequest) returns (.google.bigtable.admin.table.v1.ColumnFamily);</code>
     *
     * <pre>
     * Creates a new column family within a specified table.
     * </pre>
     */
    public abstract void createColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ColumnFamily> done);

    /**
     * <code>rpc UpdateColumnFamily(.google.bigtable.admin.table.v1.ColumnFamily) returns (.google.bigtable.admin.table.v1.ColumnFamily);</code>
     *
     * <pre>
     * Changes the configuration of a specified column family.
     * </pre>
     */
    public abstract void updateColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.ColumnFamily request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ColumnFamily> done);

    /**
     * <code>rpc DeleteColumnFamily(.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest) returns (.google.protobuf.Empty);</code>
     *
     * <pre>
     * Permanently deletes a specified column family and all of its data.
     * </pre>
     */
    public abstract void deleteColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest request,
        com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new BigtableTableService() {
      @java.lang.Override
      public  void createTable(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.admin.table.v1.CreateTableRequest request,
          com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.Table> done) {
        impl.createTable(controller, request, done);
      }

      @java.lang.Override
      public  void listTables(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.admin.table.v1.ListTablesRequest request,
          com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ListTablesResponse> done) {
        impl.listTables(controller, request, done);
      }

      @java.lang.Override
      public  void getTable(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.admin.table.v1.GetTableRequest request,
          com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.Table> done) {
        impl.getTable(controller, request, done);
      }

      @java.lang.Override
      public  void deleteTable(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.admin.table.v1.DeleteTableRequest request,
          com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done) {
        impl.deleteTable(controller, request, done);
      }

      @java.lang.Override
      public  void renameTable(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.admin.table.v1.RenameTableRequest request,
          com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done) {
        impl.renameTable(controller, request, done);
      }

      @java.lang.Override
      public  void createColumnFamily(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest request,
          com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ColumnFamily> done) {
        impl.createColumnFamily(controller, request, done);
      }

      @java.lang.Override
      public  void updateColumnFamily(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.admin.table.v1.ColumnFamily request,
          com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ColumnFamily> done) {
        impl.updateColumnFamily(controller, request, done);
      }

      @java.lang.Override
      public  void deleteColumnFamily(
          com.google.protobuf.RpcController controller,
          com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest request,
          com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done) {
        impl.deleteColumnFamily(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.createTable(controller, (com.google.bigtable.admin.table.v1.CreateTableRequest)request);
          case 1:
            return impl.listTables(controller, (com.google.bigtable.admin.table.v1.ListTablesRequest)request);
          case 2:
            return impl.getTable(controller, (com.google.bigtable.admin.table.v1.GetTableRequest)request);
          case 3:
            return impl.deleteTable(controller, (com.google.bigtable.admin.table.v1.DeleteTableRequest)request);
          case 4:
            return impl.renameTable(controller, (com.google.bigtable.admin.table.v1.RenameTableRequest)request);
          case 5:
            return impl.createColumnFamily(controller, (com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest)request);
          case 6:
            return impl.updateColumnFamily(controller, (com.google.bigtable.admin.table.v1.ColumnFamily)request);
          case 7:
            return impl.deleteColumnFamily(controller, (com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.google.bigtable.admin.table.v1.CreateTableRequest.getDefaultInstance();
          case 1:
            return com.google.bigtable.admin.table.v1.ListTablesRequest.getDefaultInstance();
          case 2:
            return com.google.bigtable.admin.table.v1.GetTableRequest.getDefaultInstance();
          case 3:
            return com.google.bigtable.admin.table.v1.DeleteTableRequest.getDefaultInstance();
          case 4:
            return com.google.bigtable.admin.table.v1.RenameTableRequest.getDefaultInstance();
          case 5:
            return com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.getDefaultInstance();
          case 6:
            return com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance();
          case 7:
            return com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.google.bigtable.admin.table.v1.Table.getDefaultInstance();
          case 1:
            return com.google.bigtable.admin.table.v1.ListTablesResponse.getDefaultInstance();
          case 2:
            return com.google.bigtable.admin.table.v1.Table.getDefaultInstance();
          case 3:
            return com.google.protobuf.Empty.getDefaultInstance();
          case 4:
            return com.google.protobuf.Empty.getDefaultInstance();
          case 5:
            return com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance();
          case 6:
            return com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance();
          case 7:
            return com.google.protobuf.Empty.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc CreateTable(.google.bigtable.admin.table.v1.CreateTableRequest) returns (.google.bigtable.admin.table.v1.Table);</code>
   *
   * <pre>
   * Creates a new table, to be served from a specified cluster.
   * The table can be created with a full set of initial column families,
   * specified in the request.
   * </pre>
   */
  public abstract void createTable(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.admin.table.v1.CreateTableRequest request,
      com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.Table> done);

  /**
   * <code>rpc ListTables(.google.bigtable.admin.table.v1.ListTablesRequest) returns (.google.bigtable.admin.table.v1.ListTablesResponse);</code>
   *
   * <pre>
   * Lists the names of all tables served from a specified cluster.
   * </pre>
   */
  public abstract void listTables(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.admin.table.v1.ListTablesRequest request,
      com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ListTablesResponse> done);

  /**
   * <code>rpc GetTable(.google.bigtable.admin.table.v1.GetTableRequest) returns (.google.bigtable.admin.table.v1.Table);</code>
   *
   * <pre>
   * Gets the schema of the specified table, including its column families.
   * </pre>
   */
  public abstract void getTable(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.admin.table.v1.GetTableRequest request,
      com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.Table> done);

  /**
   * <code>rpc DeleteTable(.google.bigtable.admin.table.v1.DeleteTableRequest) returns (.google.protobuf.Empty);</code>
   *
   * <pre>
   * Permanently deletes a specified table and all of its data.
   * </pre>
   */
  public abstract void deleteTable(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.admin.table.v1.DeleteTableRequest request,
      com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done);

  /**
   * <code>rpc RenameTable(.google.bigtable.admin.table.v1.RenameTableRequest) returns (.google.protobuf.Empty);</code>
   *
   * <pre>
   * Changes the name of a specified table.
   * Cannot be used to move tables between clusters, zones, or projects.
   * </pre>
   */
  public abstract void renameTable(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.admin.table.v1.RenameTableRequest request,
      com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done);

  /**
   * <code>rpc CreateColumnFamily(.google.bigtable.admin.table.v1.CreateColumnFamilyRequest) returns (.google.bigtable.admin.table.v1.ColumnFamily);</code>
   *
   * <pre>
   * Creates a new column family within a specified table.
   * </pre>
   */
  public abstract void createColumnFamily(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest request,
      com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ColumnFamily> done);

  /**
   * <code>rpc UpdateColumnFamily(.google.bigtable.admin.table.v1.ColumnFamily) returns (.google.bigtable.admin.table.v1.ColumnFamily);</code>
   *
   * <pre>
   * Changes the configuration of a specified column family.
   * </pre>
   */
  public abstract void updateColumnFamily(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.admin.table.v1.ColumnFamily request,
      com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ColumnFamily> done);

  /**
   * <code>rpc DeleteColumnFamily(.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest) returns (.google.protobuf.Empty);</code>
   *
   * <pre>
   * Permanently deletes a specified column family and all of its data.
   * </pre>
   */
  public abstract void deleteColumnFamily(
      com.google.protobuf.RpcController controller,
      com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest request,
      com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return com.google.bigtable.admin.table.v1.BigtableTableServicesProto.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.createTable(controller, (com.google.bigtable.admin.table.v1.CreateTableRequest)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.admin.table.v1.Table>specializeCallback(
            done));
        return;
      case 1:
        this.listTables(controller, (com.google.bigtable.admin.table.v1.ListTablesRequest)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.admin.table.v1.ListTablesResponse>specializeCallback(
            done));
        return;
      case 2:
        this.getTable(controller, (com.google.bigtable.admin.table.v1.GetTableRequest)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.admin.table.v1.Table>specializeCallback(
            done));
        return;
      case 3:
        this.deleteTable(controller, (com.google.bigtable.admin.table.v1.DeleteTableRequest)request,
          com.google.protobuf.RpcUtil.<com.google.protobuf.Empty>specializeCallback(
            done));
        return;
      case 4:
        this.renameTable(controller, (com.google.bigtable.admin.table.v1.RenameTableRequest)request,
          com.google.protobuf.RpcUtil.<com.google.protobuf.Empty>specializeCallback(
            done));
        return;
      case 5:
        this.createColumnFamily(controller, (com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.admin.table.v1.ColumnFamily>specializeCallback(
            done));
        return;
      case 6:
        this.updateColumnFamily(controller, (com.google.bigtable.admin.table.v1.ColumnFamily)request,
          com.google.protobuf.RpcUtil.<com.google.bigtable.admin.table.v1.ColumnFamily>specializeCallback(
            done));
        return;
      case 7:
        this.deleteColumnFamily(controller, (com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest)request,
          com.google.protobuf.RpcUtil.<com.google.protobuf.Empty>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.google.bigtable.admin.table.v1.CreateTableRequest.getDefaultInstance();
      case 1:
        return com.google.bigtable.admin.table.v1.ListTablesRequest.getDefaultInstance();
      case 2:
        return com.google.bigtable.admin.table.v1.GetTableRequest.getDefaultInstance();
      case 3:
        return com.google.bigtable.admin.table.v1.DeleteTableRequest.getDefaultInstance();
      case 4:
        return com.google.bigtable.admin.table.v1.RenameTableRequest.getDefaultInstance();
      case 5:
        return com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest.getDefaultInstance();
      case 6:
        return com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance();
      case 7:
        return com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.google.bigtable.admin.table.v1.Table.getDefaultInstance();
      case 1:
        return com.google.bigtable.admin.table.v1.ListTablesResponse.getDefaultInstance();
      case 2:
        return com.google.bigtable.admin.table.v1.Table.getDefaultInstance();
      case 3:
        return com.google.protobuf.Empty.getDefaultInstance();
      case 4:
        return com.google.protobuf.Empty.getDefaultInstance();
      case 5:
        return com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance();
      case 6:
        return com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance();
      case 7:
        return com.google.protobuf.Empty.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends com.google.bigtable.admin.table.v1.BigtableTableService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void createTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.CreateTableRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.Table> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.google.bigtable.admin.table.v1.Table.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.admin.table.v1.Table.class,
          com.google.bigtable.admin.table.v1.Table.getDefaultInstance()));
    }

    public  void listTables(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.ListTablesRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ListTablesResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.google.bigtable.admin.table.v1.ListTablesResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.admin.table.v1.ListTablesResponse.class,
          com.google.bigtable.admin.table.v1.ListTablesResponse.getDefaultInstance()));
    }

    public  void getTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.GetTableRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.Table> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.google.bigtable.admin.table.v1.Table.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.admin.table.v1.Table.class,
          com.google.bigtable.admin.table.v1.Table.getDefaultInstance()));
    }

    public  void deleteTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.DeleteTableRequest request,
        com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.google.protobuf.Empty.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.protobuf.Empty.class,
          com.google.protobuf.Empty.getDefaultInstance()));
    }

    public  void renameTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.RenameTableRequest request,
        com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.google.protobuf.Empty.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.protobuf.Empty.class,
          com.google.protobuf.Empty.getDefaultInstance()));
    }

    public  void createColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ColumnFamily> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.admin.table.v1.ColumnFamily.class,
          com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance()));
    }

    public  void updateColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.ColumnFamily request,
        com.google.protobuf.RpcCallback<com.google.bigtable.admin.table.v1.ColumnFamily> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.bigtable.admin.table.v1.ColumnFamily.class,
          com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance()));
    }

    public  void deleteColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest request,
        com.google.protobuf.RpcCallback<com.google.protobuf.Empty> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        com.google.protobuf.Empty.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          com.google.protobuf.Empty.class,
          com.google.protobuf.Empty.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public com.google.bigtable.admin.table.v1.Table createTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.CreateTableRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.bigtable.admin.table.v1.ListTablesResponse listTables(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.ListTablesRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.bigtable.admin.table.v1.Table getTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.GetTableRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.protobuf.Empty deleteTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.DeleteTableRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.protobuf.Empty renameTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.RenameTableRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.bigtable.admin.table.v1.ColumnFamily createColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest request)
        throws com.google.protobuf.ServiceException;

    public com.google.bigtable.admin.table.v1.ColumnFamily updateColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.ColumnFamily request)
        throws com.google.protobuf.ServiceException;

    public com.google.protobuf.Empty deleteColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public com.google.bigtable.admin.table.v1.Table createTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.CreateTableRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.admin.table.v1.Table) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        com.google.bigtable.admin.table.v1.Table.getDefaultInstance());
    }


    public com.google.bigtable.admin.table.v1.ListTablesResponse listTables(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.ListTablesRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.admin.table.v1.ListTablesResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        com.google.bigtable.admin.table.v1.ListTablesResponse.getDefaultInstance());
    }


    public com.google.bigtable.admin.table.v1.Table getTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.GetTableRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.admin.table.v1.Table) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        com.google.bigtable.admin.table.v1.Table.getDefaultInstance());
    }


    public com.google.protobuf.Empty deleteTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.DeleteTableRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.protobuf.Empty) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        com.google.protobuf.Empty.getDefaultInstance());
    }


    public com.google.protobuf.Empty renameTable(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.RenameTableRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.protobuf.Empty) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        com.google.protobuf.Empty.getDefaultInstance());
    }


    public com.google.bigtable.admin.table.v1.ColumnFamily createColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.CreateColumnFamilyRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.admin.table.v1.ColumnFamily) channel.callBlockingMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance());
    }


    public com.google.bigtable.admin.table.v1.ColumnFamily updateColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.ColumnFamily request)
        throws com.google.protobuf.ServiceException {
      return (com.google.bigtable.admin.table.v1.ColumnFamily) channel.callBlockingMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        com.google.bigtable.admin.table.v1.ColumnFamily.getDefaultInstance());
    }


    public com.google.protobuf.Empty deleteColumnFamily(
        com.google.protobuf.RpcController controller,
        com.google.bigtable.admin.table.v1.DeleteColumnFamilyRequest request)
        throws com.google.protobuf.ServiceException {
      return (com.google.protobuf.Empty) channel.callBlockingMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        com.google.protobuf.Empty.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:google.bigtable.admin.table.v1.BigtableTableService)
}

